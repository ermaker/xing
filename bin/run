#!/usr/bin/env ruby

require 'dotenv'
Dotenv.load
require 'bundler/setup'
require 'xing'
require 'mshard'
require 'logger'

at_exit do
  require 'English'
  MShard::MShard.new.set_error($ERROR_INFO)
end

STDOUT.sync = true
LOGGER = Logger.new(STDOUT)

at_exit do
  require 'English'
  LOGGER.fatal { "#{$ERROR_INFO}" }
  LOGGER.fatal { "#{$ERROR_INFO.backtrace.join("\n")}" }
end

def continue?
  MShard::MShard.new.get(:notify).tap do |notify|
    LOGGER.debug { "Notify: #{notify}" }
  end != 'stop'
end

def notify(contents)
  MShard::MShard.new.set_safe(pushbullet: true, type: :note, title: contents)
end

def t1901(shcode, delay: 5) # rubocop:disable Metrics/MethodLength
  loop do
    retval = Xing::API.tr(:t1901, shcode: shcode)
    begin
      price = retval['response']['price'].to_i
      return price unless price.zero?
      LOGGER.error { "Price is zero. retval: #{retval}" }
    rescue NoMethodError # rubocop:disable Lint/HandleExceptions
    end
    LOGGER.error { "Retry: #{retval['message']}" }
    sleep delay
  end
end

BOUGHT = 'bought'

def trade(shcode, sell_or_buy, qty, record_id) # rubocop:disable Metrics/MethodLength, Metrics/LineLength
  return unless yield
  LOGGER.debug do
    "Good condition: #{shcode}, #{sell_or_buy}, #{qty}, #{record_id}"
  end
  if MShard::MShard.new.get(record_id) == BOUGHT
    LOGGER.debug { 'Already traded.' }
  else
    LOGGER.debug { 'Try trade.' }
    retval = Xing::API.tr(
      :CSPAT00600,
      pass: ENV['ACCOUNT_PASS'],
      shcode: shcode, qty: qty, sell_or_buy: sell_or_buy)
    LOGGER.debug { "retval: #{retval}" }
    MShard::MShard.new.set_safe(id: record_id, contents: BOUGHT)
    LOGGER.info { 'Finished trade.' }
  end
end

SLEEP = 10

loop do
  if continue?
    begin
      leverage = t1901(:leverage)
      LOGGER.debug { "Leverage: #{leverage}" }
      if leverage < 9050 || leverage > 10_000
        notify("Leverage: #{leverage}")
        LOGGER.info { "Leverage: #{leverage}" }
      end

      base = 9050

      base.step(base - 100, -50) do |price|
        trade(:leverage, :buy, 3, :"xing_test_#{price}") do
          leverage < price
        end
      end
    end
  end

  sleep SLEEP

  if continue?
    begin
      inverse = t1901(:inverse)
      LOGGER.debug { "Inverse: #{inverse}" }
      if inverse > 8600
        notify("Inverse: #{inverse}")
        LOGGER.info { "Inverse: #{inverse}" }
      end
    end
  else
    LOGGER.debug { 'Stopped. Passing' }
  end

  sleep SLEEP
end
