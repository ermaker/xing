#!/usr/bin/env ruby

require 'dotenv'
Dotenv.load
require 'bundler/setup'
require 'xing'
require 'mshard'
require 'logger'

at_exit do
  require 'English'
  MShard::MShard.new.set_error($ERROR_INFO)
end

STDOUT.sync = true
LOGGER = Logger.new(STDOUT)

at_exit do
  require 'English'
  LOGGER.fatal { "#{$ERROR_INFO}" }
  LOGGER.fatal { "#{$ERROR_INFO.backtrace.join("\n")}" }
end

def continue?
  MShard::MShard.new.get(:notify).tap do |notify|
    LOGGER.debug { "Notify: #{notify}" }
  end != 'stop'
end

def notify(contents)
  MShard::MShard.new.set_safe(pushbullet: true, type: :note, title: contents)
end

def t1901(shcode, delay: 5)
  loop do
    retval = Xing::API.tr(:t1901, shcode: shcode)
    begin
      return retval['response']['price'].to_i
    rescue NoMethodError
      LOGGER.error { "Retry: #{retval['message']}" }
      sleep delay
    end
  end
end

SLEEP = 10

loop do
  if continue?
    begin
      leverage = t1901(:leverage)
      LOGGER.debug { "Leverage: #{leverage}" }
      if leverage < 9150 || leverage > 10_000
        notify("Leverage: #{leverage}")
        LOGGER.info { "Leverage: #{leverage}" }
      end
    end
  end

  sleep SLEEP

  if continue?
    begin
      inverse = t1901(:inverse)
      LOGGER.debug { "Inverse: #{inverse}" }
      if inverse > 8600
        notify("Inverse: #{inverse}")
        LOGGER.info { "Inverse: #{inverse}" }
      end
    end
  else
    LOGGER.debug { 'Stopped. Passing' }
  end

  sleep SLEEP
end
